1: Executive Summary
	Welcome to CityInfo. This is a single page website that would give the user a number of stats concerning any city within the US to start. For our initial MVP (Minimum Viable Product), we will have a page where the user can enter a city name and immediately after they submit their text entry, the system will display the current number of COVID-19 cases in that area in addition to the weather. For our coming revisions we will also include a great number of new stats such as: crime rates, map previews, geospatial analysis, entertainment, businesses, and even more! CityInfo takes a unique and innovative stance on the travel industry as a whole. Instead of simply being economically incentivized to advertize a destination, we discuss many of the aspects more concerned travelers would like to be informed about from a completely unbiased view. This lack of bias will come from the fact that we have no monetization mechanisms at the moment, we are simply taking information from the internet and giving it to the people in one central location free of tracking and cookies.
2: Competitive analysis
Insert Dennis file:
	
3: Data Definition
	User- Anyone accessing the webpage from a web browser. There is not currently a registration process.
	Application Web Page- The static html, CSS, JS, and images served to allow the application to be rendered in the browser.
	COVID related information- Statistics retrieved by the COVID Tracking API such as current infections, recent deaths, historical death, and increase of death from previous day’s value. 
	API – A web-based data endpoint to retrieve information from. Run by third parties and the source of rendered information. An intermediate API may be needed to retrieve State information from zipcodes.
4: Overview, scenarios, and use cases:
	A user with no prior registration should be able to enter a zip code, city or state into a search bar and receive COVID related information and other information to be determined. There is not a login or logout process to stand between the user and getting information. 
	If the user enters information that does not match anything in the API, a rendered error message will be relayed and prompt the user to try again. 
5: Initial list of high-level functional requirements
	1-A user should be able enter their information into the website. If the information is not recognized by the API, an error message should appear.
	2-Upon submitting information recognized by the API, relevant data will be rendered in the web browser.
6: List of non-functional requirements
	1-Security Requirements: The system will prevent XSS attack by validating all user input. No user information is collected, so there are no concerns about a secure back end. Modification to the deployment system used will be password restricted with possible MFA. 
	2-Dependability Requirements: We are constrained to deployment on an FAU LAMP server, but we should be able to host the page on an S3 bucket on AWS and have a highly reliable site. Amazon claims 99.999999999% durability and 99.99% availability. Content distribution can be enhanced with Amazon CloudFront. Other cloud service products can be used instead of Amazon. 
	3-Usability Requirements: The interface will be understandable by anyone with a beginner level of understanding computer user interfaces. The language used will be English
	4-Performance Requirements: This page should be operable on any device made in the last 10 years that can run one of the internet browsers mentioned in the functional requirements. Rendering should occur in less than 3 seconds, but the performance of searches will be dependent on the API’s used.
	5-Development Requirements: This product is dependent on The Atlantic’s COVID tracking site and other API’s so updates to those API’s will need to be implemented as they occur. Any increased functionality after development will also require additional development of the site or a content management system to add updated information to the site. 
	6-Operational requirements:  The website will be static webpages and will be hostable on AWS or similar cloud services with minimal manpower needed for upkeep. Without the need for a EC2 like service, actual resources needed should be minimal. 
	7-Regulatory requirements: The API’s used all have their own terms and uses. The COVID tracker can be used for commercial purposes so ad’s can be introduced but usage of other API’s may incur restrictions or fees. 
	8-Space requirements: The static resources should be measured in no more than 2 MB.
7: High-Level System Architecture:
 The front end will be rendered in a web browser that can run HTML 5 and us CSS for style sheets. Creating the html, CSS, and JS files only requires a text editor and is up to the individual team-members to choose an editor. Visual Studio Code is suggested. We will be supporting recent versions of Edge, Firefox, Chrome, and Safari with testing of earlier versions during later sprints. We will start using the covidtracking.com API supplied by The Atlantic to start but may include other API’s during subsequent sprints. We are going to use bootstrap for styling which requires jQuery and we are looking into Final Form for form validation. To be able to offer full zip code search compatibility, a location API may need to be used. 
8: Team
9: Checklist
a)	DONE
b)	ON TRACK
c)	ON TRACK
d)	DONE
e)	ON TRACK
f)	ON TRACK
g)	ON TRACK
